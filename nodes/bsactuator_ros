#!/usr/bin/python
# -*- coding: utf-8 -*-

#################################################################################
# MIT License

# Copyright (c) 2022 Shun Nagao

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#################################################################################

import rospy
from bsactuator import bsactuator
from std_msgs.msg import Int16
from std_msgs.msg import String
from actionlib_msgs.msg import GoalStatus
from copy import copy
import time
import os

# global variables
speed = 7
moving = False
publisher_get_length = None
publisher_goal_status = None
dist_length = 0

current_length = 0
ba = None
waitsec = 0.5
timeout = time.time()

usb_list = []

def set_length(msg):
    '''
    Callback function of /set_length topic subscription
    msg.data : std_msgs/Int16
    '''
    global speed
    global moving
    global publisher_get_length
    global current_length
    global ba
    global timeout
    global waitsec
    global dist_length

    rospy.loginfo("dist length: %dmm", msg.data)
    dist_length = msg.data

    moving = True
    ba.set_length(msg.data)

def reset(msg):
    '''
    Callback function of /reset topic subscription
    msg.data : std_msgs/String
    '''
    if msg.data == "true":
        ba.reset()

def stop(msg):
    '''
    Callback function of /stop topic subscription
    msg.data : std_msgs/String
    '''
    if msg.data == "true":
        ba.stop()

def publish_get_length():
    global publisher_get_length
    global publisher_goal_status
    global current_length
    global moving
    global dist_length

    current_length = int(ba.get_length())
    publisher_get_length.publish(current_length)
    if moving == True and current_length > dist_length - 10 and current_length < dist_length + 10:
        moving = False
        goal = GoalStatus()
        stamp = rospy.Time.now()
        goal.goal_id.stamp = stamp
        goal.goal_id.id = "bsactuator-" + str(stamp.secs) + "." + str(stamp.nsecs)
        goal.status = 3
        goal.text = "Goal reached."
        publisher_goal_status.publish(goal)


if __name__ == '__main__':
    rospy.init_node('bsactuator', log_level=rospy.DEBUG)

    ba = bsactuator.BsActuator("/dev/bambooshoot_actuator",115200)

    # setting subscribers
    rospy.loginfo("setting subscribers...")
    rospy.Subscriber('set_length', Int16, set_length)
    rospy.Subscriber('reset', String, reset)
    rospy.Subscriber('stop', String, stop)

    # setting publishers
    rospy.loginfo("setting publishers...")
    publisher_get_length = rospy.Publisher("bsactuator/length", Int16, queue_size=10)
    publisher_goal_status = rospy.Publisher("bsactuator/status", GoalStatus, queue_size=10)

    rospy.loginfo("bambooshoot actuator started.")

    r = rospy.Rate(10)
    count = 0
    while not rospy.is_shutdown():
        if count % 10 == 0:
            publish_get_length()
            if count > 100:
                count = 0
        count += 1
        r.sleep()
